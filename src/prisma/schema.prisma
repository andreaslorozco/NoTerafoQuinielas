// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id              Int    @id @default(autoincrement())
  name            String
  users           User[]
}
model User {
  id              Int         @id @default(autoincrement())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role_id         Int         @default(1)
  role            Role        @relation(fields: [role_id], references: [id])
  owned_lobbies   Lobby[]
  user_lobbies    UserLobby[]
  predictions     Prediction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id              Int         @id @default(autoincrement())
  name            String
  active          Boolean
  description     String
  is_for_nations  Boolean
  phases          Phase[]
}

model Phase {
  id              Int         @id @default(autoincrement())
  name            String
  tournament_id   Int
  tournament      Tournament  @relation(fields: [tournament_id], references: [id])
}

model Team {
  id              Int         @id @default(autoincrement())
  name            String
  country         String
  is_nation       Boolean
  home_games      Game[]      @relation("home_team")
  away_games      Game[]      @relation("away_team")
}

model Game {
  id              Int           @id @default(autoincrement())
  home_team_id    Int
  away_team_id    Int
  home_score      Int
  phase_id        Int
  completed       Boolean
  away_score      Int
  date            DateTime
  home_team       Team          @relation("home_team", fields: [home_team_id], references: [id])
  away_team       Team          @relation("away_team", fields: [away_team_id], references: [id])
  predictions     Prediction[]
}

model Lobby {
  id              Int           @id @default(autoincrement())
  owner_id        Int
  tournament_id   Int
  invite_code     String
  name            String
  owner           User          @relation(fields: [owner_id], references: [id])
  user_lobbies    UserLobby[]
}

model UserLobby {
  id              Int           @id @default(autoincrement())
  user_id         Int
  lobby_id        Int
  user            User          @relation(fields: [user_id], references: [id])
  lobby           Lobby         @relation(fields: [lobby_id], references: [id])
}

model Prediction {
  id              Int           @id @default(autoincrement())
  user_id         Int
  game_id         Int
  home_score      Int
  away_score      Int
  score           Int
  processed       Boolean       @default(false)
  user            User          @relation(fields: [user_id], references: [id])
  game            Game          @relation(fields: [game_id], references: [id])
}